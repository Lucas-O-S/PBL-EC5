@model List<ManutencaoViewModel>

<!-- Tabela de Manutenção -->
<section class="manutencao-table-section">

    <!-- Container do primeiro gráfico -->
    <div>
        <h1>Empresas em manutenção</h1>
    </div>
    <div class="chart-container">
        <canvas id="manutencaoChart"></canvas>
    </div>

</section>

<section class="sensor-table-section">
    
    <!-- Container do segundo gráfico -->
    <div>
        <h1>Sensores em manutenção</h1>
    </div>
    <div class="chart-container">
        <canvas id="manutencaoChart01"></canvas>
    </div>

    <div>
        <h1>0 -> Completo</h1>
        <h1>1 -> Incompleto</h1>
        <h1>2 -> Cancelado</h1>
    </div>

</section>
    <!--Seção de botões-->
    <div class="button-container">
        <a class="button" href="/Home/Index">Voltar</a>
    </div>

    <script>
        // Dados recebidos da ViewBag
        const empresasData = @Html.Raw(ViewBag.EmpresasData);

        // Extração dos dados para o gráfico
        const labels = empresasData.map(item => item.nomeEmpresa); // Usando o nome das empresas como rótulos
        const dataCounts = empresasData.map(item => item.qtdManutencao); // Usando o total como valores
        console.log(empresasData);


        // Modelo do gráfico
        const ctx = document.getElementById('manutencaoChart').getContext('2d');
        const chart = new Chart(ctx, {
        type: 'bar', // Gráfico de colunas
        data: {
            labels: labels, // Nomes das empresas
            datasets: [{
                label: 'Quantidade de Manutenções',
                data: dataCounts, // Quantidade de manutenções
                backgroundColor: [
                    'rgba(0, 0, 0, 0.8)', 
                    'rgba(0, 0, 255, 0.6)' 
                ],
                borderColor: [
                    'rgba(0, 0, 0, 1)',
                    'rgba(0, 0, 255, 1)' 
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: { beginAtZero: true },
                y: { beginAtZero: true }
            }
        }
    });

        // Dados recebidos da ViewBag
        const ManutencaoData = @Html.Raw(ViewBag.ManutencaoData);

        // Extração dos dados para o gráfico
        const labels01 = ManutencaoData.map(item => item.estadoNome); // Usando o nome das empresas como rótulos
        const dataCounts01 = ManutencaoData.map(item => item.descricaoSensor); // Usando o total como valores
        console.log(ManutencaoData);


        // Configuração do segundo gráfico usando Chart.js
        const novoCtx = document.getElementById('manutencaoChart01').getContext('2d');
        const novoChart = new Chart(novoCtx, {
        type: 'bar', 
            data: {
            labels: dataCounts01,
            datasets: [{
                    label: 'Condição do sensor',
                    data: labels01,
                    backgroundColor: [
                        'rgba(0, 0, 0, 0.8)',
                        'rgba(0, 0, 255, 0.6)'
                    ],
                    borderColor: [
                        'rgba(0, 0, 0, 0.8)',
                        'rgba(0, 0, 255, 0.6)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });

        function troca() {
        const empresasData = @Html.Raw(ViewBag.EmpresasData);
        }

</script>