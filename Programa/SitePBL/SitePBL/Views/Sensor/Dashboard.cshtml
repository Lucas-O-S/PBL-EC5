@{
    ViewData["Title"] = "Dashboard de Sensores";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="~/css/dashSens.css">
</head>
<body>

    <main id="dashboard" class="content-container">
        <div class="container-row">
            <!-- Seção de Controles -->
            <section class="controls-section">
                <div>
                    <h1>Controle de Temperatura</h1>
                </div>

                <div class="button-container">
                    <button id="toggleButton" class="button">Pausar</button>
                    <button id="calculateErrorButton" class="button">Calcular Erro Estacionário</button>
                    <button id="calculateTimeConstantButton" class="button">Calcular Constante de Tempo</button>
                </div>

                <div class="controls">
                    <div class="form-group">
                        <label for="mvInput">SetPoint:</label>
                        <input type="number" id="mvInput" class="form-control" step="0.1" />
                    </div>
                    <div class="form-group">
                        <label for="kpInput">Kp:</label>
                        <input type="number" id="kpInput" class="form-control" step="0.1" />
                    </div>
                    <div class="form-group">
                        <label for="kiInput">Ki:</label>
                        <input type="number" id="kiInput" class="form-control" step="0.1" />
                    </div>
                    <div class="form-group">
                        <label for="kdInput">Kd:</label>
                        <input type="number" id="kdInput" class="form-control" step="0.1" />
                    </div>
                </div>

                <div
                        <label for="errorResult">Erro Estacionário (Fórmula):</label>
                        <input type="text" id="errorExpect" class="form-control" readonly />

                        <label for="errorResult">Erro Estacionário (Realidade):</label>
                        <input type="text" id="errorResult" class="form-control" readonly />
                        
                        <label for="timeConstantResult">Constante de Tempo (K):</label>
                        <input type="text" id="timeConstantResult" class="form-control" readonly />
                </div>

            </section>

            <!-- Seção do Gráfico -->
            <section class="chart-section">
                <div class="chart-container">
                    <canvas id="chart"></canvas>
                </div>
            </section>
        </div>
    </main>


    <script>
        // Configuração do gráfico
        const ctx = document.getElementById('chart').getContext('2d');
        const labels = [];
        const temperatureData = [];
        const MV = [];

        const dynamicChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Temperatura (°C)',
                        data: temperatureData,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'MV (Valor de Medição)',
                        data: [],
                        borderColor: 'rgba(19, 108, 1, 1)',
                        borderWidth: 1,
                        borderDash: [5, 5],
                        fill: false
                    }
                ]
            },
            options: {
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });

        // Controle de pausa/retomada
        let isPaused = false;
        const toggleButton = document.getElementById('toggleButton');
        toggleButton.addEventListener('click', () => {
            isPaused = !isPaused;
            toggleButton.textContent = isPaused ? 'Retomar' : 'Pausar';
        });

        // Função para obter a temperatura diretamente do Fiware
        async function obterTemperatura(host, lamp) {
            try {
                const response = await fetch(`http://${host}:1026/v2/entities/urn:ngsi-ld:Lamp:${lamp}/attrs/temperature`, {
                    method: 'GET',
                    headers: {
                        'fiware-service': 'smart',
                        'fiware-servicepath': '/',
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    const temp = data.value;
                    const dataString = data.metadata.TimeInstant.value;
                    const dataHora = new Date(dataString);

                    // Adiciona dados ao gráfico
                    temperatureData.push(temp);
                    labels.push(dataHora.toLocaleTimeString());
                    dynamicChart.update();
                } else {
                    console.error('Erro ao buscar os dados do Fiware:', response.statusText);
                }
            } catch (error) {
                console.error('Erro na requisição:', error);
            }
        }

        // Atualizar a temperatura a cada 1 segundo
        setInterval(() => {
            if (!isPaused) {

                //obterTemperatura('4.228.64.5', '03y');  // Chame a função passando o IP do servidor e o ID da lâmpada
                const newTemperature = Math.floor(Math.random() * 10) + 20; // Gera temperatura entre 20 e 30°C

                //conversão do valor de MV
                const mvInput = document.getElementById('mvInput');
                mvValue = parseFloat(mvInput.value);

                // Adiciona novos 
                temperatureData.push(newTemperature);

                labels.push(`${labels.length}s`);

                // Atualiza a linha de MV para que acompanhe o gráfico
                if (mvValue !== null) {
                    dynamicChart.data.datasets[1].data.push(mvValue);
                }

                // Atualiza o gráfico
                dynamicChart.update();
            }
        }, 1000);

        // Atualização da linha de MV
        const mvInput = document.getElementById('mvInput');
        mvInput.addEventListener('change', () => {
            mvValue = parseFloat(mvInput.value);
            if (!isNaN(mvValue)) {
                dynamicChart.data.datasets[1].data = Array(labels.length).fill(mvValue);
                dynamicChart.update();
            }
        });

        // Cálculo do Erro Estacionário
        document.getElementById('calculateErrorButton').addEventListener('click', () => {
            const setpoint = parseFloat(document.getElementById('mvInput').value);
            if (!isNaN(setpoint)) {
                const lastTemperature = temperatureData[temperatureData.length - 1];
                const erroEstacionario = setpoint - lastTemperature;
                document.getElementById('errorExpect').value = erroEstacionario.toFixed(2);
            }
        });

        // Cálculo da Constante de Tempo
        document.getElementById('calculateTimeConstantButton').addEventListener('click', () => {
            const finalValue = temperatureData[temperatureData.length - 1];
            const initialValue = temperatureData[0];
            const targetValue = initialValue + 0.632 * (finalValue - initialValue);

            let timeIndex = labels.length - 1;
            for (let i = 0; i < temperatureData.length; i++) {
                if (temperatureData[i] >= targetValue) {
                    timeIndex = i;
                    break;
                }
            }

            const timeConstant = parseInt(labels[timeIndex]);
            document.getElementById('timeConstantResult').value = `Constante de Tempo (K): ${timeConstant}s`;
        });

        // Cálculo do Erro Estacionário
        document.getElementById('calculateErrorButton').addEventListener('click', () => {
            const setpoint = parseFloat(document.getElementById('mvInput').value);
            const kp = parseFloat(document.getElementById('kpInput').value);
            const initialTemperature = temperatureData[0];
            const finalTemperature = temperatureData[temperatureData.length - 1];
            const K = parseFloat(document.getElementById('timeConstantResult').value);

            // Verifique se os valores são números válidos
            if (!isNaN(setpoint) && !isNaN(kp) && !isNaN(initialTemperature) && !isNaN(finalTemperature)) {
                // Calcule a amplitude A
                const amplitude = initialTemperature - setpoint;

                // Calcule o Erro Estacionário
                const erroEstacionario = amplitude / (1 + (kp * K));

                // Exiba o resultado no campo apropriado
                document.getElementById('errorResult').value = erroEstacionario.toFixed(2);
            } else {
                document.getElementById('errorResult').value = 'Valores inválidos fornecidos para o cálculo do Erro Estacionário.';
            }
        });


    </script>

</body>
</html>
