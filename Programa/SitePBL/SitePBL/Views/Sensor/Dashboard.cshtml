@{
    ViewData["Title"] = "Dashboard de Sensores";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="~/css/dashSens.css">
</head>
<body>

    <main id="dashboard" class="content-container">
        <div class="container-row">
            <!-- Seção de Controles -->
            <section class="controls-section">
                <div>
                    <h1>Controle de Temperatura</h1>
                </div>

                <div class="controls">
                    <div class="form-group">
                        <label for="mvInput">SetPoint:</label>
                        <input type="number" id="mvInput" class="form-control" step="0.1" />
                    </div>
                    <div class="form-group">
                        <label for="kpInput">Kp:</label>
                        <input type="number" id="kpInput" class="form-control" step="0.1" />
                    </div>
                    <div class="form-group">
                        <label for="kiInput">Ki:</label>
                        <input type="number" id="kiInput" class="form-control" step="0.1"/>
                    </div>
                    <div class="form-group">
                        <label for="kdInput">Kd:</label>
                        <input type="number" id="kdInput" class="form-control" step="0.1" />
                    </div>
                </div>

            </section>

            <!-- Seção do Gráfico -->
            <section class="chart-section">
                <div class="chart-container">
                    <canvas id="chart"></canvas>
                </div>
  
                <div class="button-container">
                    <button id="toggleButton" class="button">Pausar</button>
                    <button id="calculateErrorButton" class="button">Calcular Erro Estacionário</button>

                    <div>
                        <label for="Temp">Temperatura atual: </label>
                        <input type="text" id="Temp" class="form-control" readonly value="0.1" />
                    </div>
 
                </div>

            </section>

            <div>
                <label for="errorExpect">Erro Estacionário (Fórmula):</label>
                <input type="text" id="errorExpect" class="form-control" readonly />

                <label for="errorResult">Erro Estacionário (Realidade):</label>
                <input type="text" id="errorResult" class="form-control" readonly />

                <label for="ConstantTime">Constante de ganho (K):</label>
                <input type="text" id="ConstantTime" class="form-control" readonly />
            </div>
        </div>
    </main>


    <script>
        // Configuração do gráfico
        const ctx = document.getElementById('chart').getContext('2d');
        const labels = [];
        const temperatureData = [];
        const MV = [];

        const dynamicChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Temperatura (°C)',
                        data: temperatureData,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'MV (Valor de Medição)',
                        data: [],
                        borderColor: 'rgba(19, 108, 1, 1)',
                        borderWidth: 1,
                        borderDash: [5, 5],
                        fill: false
                    }
                ]
            },
            options: {
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });

        // Controle de pausa/retomada
        let isPaused = false;
        const toggleButton = document.getElementById('toggleButton');
        toggleButton.addEventListener('click', () => {
            isPaused = !isPaused;
            toggleButton.textContent = isPaused ? 'Retomar' : 'Pausar';
        });

        // Função para obter a temperatura diretamente do Fiware
        async function obterTemperatura(host, lamp) {
            try {
                const response = await fetch(`http://${host}:1026/v2/entities/urn:ngsi-ld:Lamp:${lamp}/attrs/temperature`, {
                    method: 'GET',
                    headers: {
                        'fiware-service': 'smart',
                        'fiware-servicepath': '/',
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    const temp = data.value;
                    const dataString = data.metadata.TimeInstant.value;
                    const dataHora = new Date(dataString);

                    // Adiciona dados ao gráfico
                    temperatureData.push(temp);
                    labels.push(dataHora.toLocaleTimeString());
                    dynamicChart.update();
                } else {
                    console.error('Erro ao buscar os dados do Fiware:', response.statusText);
                }
            } catch (error) {
                console.error('Erro na requisição:', error);
            }
        }

        // Atualizar a temperatura a cada 1 segundo
        setInterval(() => {
            if (!isPaused) {

                //Simula uma curva
                var i = parseFloat(document.getElementById('Temp').value);
                if (i < 0.9) 
                     { i += 0.1; }
                document.getElementById('Temp').value = i;

                //obterTemperatura('4.228.64.5', '03y');  // Chame a função passando o IP do servidor e o ID da lâmpada
                const newTemperature = 20/(Math.cos(i));              

                //conversão do valor de MV
                const mvInput = document.getElementById('mvInput');
                mvValue = parseFloat(mvInput.value);

                // Adiciona novos 
                temperatureData.push(newTemperature);

                labels.push(`${labels.length}s`);

                // Atualiza a linha de MV para que acompanhe o gráfico
                if (mvValue !== null) {
                    dynamicChart.data.datasets[1].data.push(mvValue);
                }

                // Atualiza o gráfico
                dynamicChart.update();
            }
        }, 1000);

        // Atualização da linha de MV
        const mvInput = document.getElementById('mvInput');
        mvInput.addEventListener('change', () => {
            mvValue = parseFloat(mvInput.value);
            if (!isNaN(mvValue)) {
                dynamicChart.data.datasets[1].data = Array(labels.length).fill(mvValue);
                dynamicChart.update();
            }
        });

        // Cálculo do botão "Calcular"
        document.getElementById('calculateErrorButton').addEventListener('click', () => {
            const setpoint = parseFloat(document.getElementById('mvInput').value);
            if (!isNaN(setpoint)) {
                
                const ganhoK = calcularGanho(); // Obtém o ganho K
                const setpoint = parseFloat(document.getElementById('mvInput').value); // Obtém o setpoint
                const kp = parseFloat(document.getElementById('kpInput').value); // Obtém o Kp
                const lastTemperature = temperatureData[temperatureData.length - 1]; //Última temperatura
                const initialValue = temperatureData[0]; //Temperatura inicial
                const erroEstacionarioResult = setpoint - lastTemperature; //Diferença entre o setpoint e a última temperatura
                const targetValue = initialValue + 0.632 * (lastTemperature - initialValue); //Constante de tempo (Tau)

                //Calcula constante de tempo
                let timeIndex = labels.length - 1;
                for (let i = 0; i < temperatureData.length; i++) {
                    if (temperatureData[i] >= targetValue) {
                        timeIndex = i; // Encontra o índice correspondente ao targetValue
                        break;
                    }
                }
                // Como o intervalo é de 1 segundo, o índice é o tempo em segundos
                const timeConstant = timeIndex;

                //Calcula o Erro estacionário (Fórmula)
                if (ganhoK !== null && !isNaN(kp) && !isNaN(setpoint)) {
                    const erroEstacionarioReal = (setpoint - lastTemperature) / (1 + kp * ganhoK);
                    document.getElementById('errorExpect').value = erroEstacionarioReal.toFixed(2);
                } else {
                    console.error('Erro ao calcular o erro estacionário.');
                }
                
                document.getElementById('errorResult').value = erroEstacionarioResult.toFixed(2); //Erro estacionário (Realidade)
            }
        });

        //Formula que calcula o ganho
        function calcularGanho() {
            const initialTemperature = temperatureData[0]; // Primeiro valor da temperatura
            const finalTemperature = temperatureData[temperatureData.length - 1]; // Último valor da temperatura
            const mvInput = parseFloat(document.getElementById('mvInput').value); // MV atual

            if (!isNaN(initialTemperature) && !isNaN(finalTemperature) && !isNaN(mvInput)) {
                // Variação de MV
                const deltaMV = mvInput; - initialTemperature;

                // Calcula o ganho
                const ganhoK = (finalTemperature - initialTemperature) / deltaMV;

                // Exibe o ganho
                document.getElementById('ConstantTime').value = ganhoK.toFixed(2);
                return ganhoK;
            } else {
                console.error('Não foi possível calcular o ganho. Verifique os valores fornecidos.');
                return null;
            }
        }

    </script>

</body>
</html>
